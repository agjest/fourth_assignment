---
title: "Assignment 4"
format: html
editor: visual
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
```

## restatapi

## Toc. eurostat

Vi starter med å hente innholsfortegnelsen fra eurostat. Vi henter innholdsfortegnelsen i rent tekst format. Innholdsfortegnelsen gir vi navnet `toc_txt`.

```{r}
# xml skal ha mer detaljert info
# toc_xml <- get_eurostat_toc()
# tekstversjonen har trolig nok info for vårt formål
toc_txt <- get_eurostat_toc(mode = "txt")
```

## GDP NUTS 3

Vi søker i toc_txt etter tabeller med GDP på nivå NUTS 3 vha. funksjonen `str_detect()`. Denne funksjonen skiller mellom store og små bokstaver. Siden vi ikke vet hvilken skrivemåte som er brukt for gdp og NUTS 3 benytter vi regex for å matche både små og store bokstaver. Vi benytter `filter()` for å finne de tabellene vi ønsker. Vi benytter `select()` for å velge ut kolonnene `title` og `code` som vi ønsker å se på. Vi benytter `flextable()` for å vise tabellen. Vi benytter til slutt `autofit()` for å tilpasse tabellen til siden. Detaljer om regex finner dere i [Slides: Strings and regular expressions](https://msb105.netlify.app/wrangle-data/string-data/string-data#/title-slide) og i [r4ds ed. 1 chp. 14](https://r4ds.had.co.nz/strings.html).

Vi ønsker å finne tabellbeskrivelser som *både* inneholder gdp *og* nuts 3. Trikset for enkelt å få dette til er å ha AND (&) *utenfor* `str_detect()`. Det går an å få til en AND inne i en regexp, men dette kan fort bli kronglete og komplisert.

```{r}
gdp_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Gg][Dd][Pp]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

Vi finner fire tabeller listet i toc_txt.

```{r}
gdp_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```

Vi velger å benytte tabellen med kode `nama_10r_3gdp` som har forklarende tekst «Gross domestic product (GDP) at current market prices by NUTS 3 regions». Vi henter «Data Structure Definition» for å finne hva som finnes i dette datasettet. Informasjonen benyttes for å definer «filters» for spørringen mot eurostat.

MERK! Merk bruken av nuts_level = "3" i filters for å få data på NUTS 3 nivå. Denne parameteren var ikke så lett å finne.

Vi laster så ned «Data Structure Definition (DSD)» for tabellen med code `nama_10r_3gdp`.

```{r}
# description nama_10r_3gdp
dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
```

```{r}
dsd_gdp |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

Utfra kodene i `dsd_gdp`kan vi da formulere følgende spørring mot Eurostat:

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions 
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
  id = "nama_10r_3gdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "MIO_PPS_EU27_2020"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(
    gdp = 1000000 * values
  ) |> 
  select(-c(unit, values)) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```

Vi velger å benytte `MIO_PPS_EU27_2020` som mål på GNP. Dette er GNP i løpende priser (million Euro). Det kunne vært aktuelt å benytte `PPS_EU27_2020_HAB` som skal være GNP målt i konstant kjøpekraft. Det synes imidlertid som om `PPS_EU27_2020_HAB` har urimelige/åpenbart feil verdier for en del regioner.

## Population demo_r_pjanaggr3

### Oppgave 1

Søk i `toc_txt` for tabeller med *population* og *NUTS 3*. Pass på at dere dekker både *population* og *Population* og ulike skrivemåter for *NUTS 3*.

```{r}
toc_txt_tabeller <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Po][Oo][Pp][Uu][Ll][Aa][Tt][Ii][Oo][Nn]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

### Oppgave 2

i.  Finn koden for tabellen med forklarende tekst «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

ii. Last ned Data Structure Definition (DSD) for denne tabellen.

iii. Bruk opplysningene i DSD for å formulere en spørring mot Eurostat og last ned dataene. Gi dataene lastet ned samme navn som Eurostat sin kode for tabellen. Vi er bare interessert i totalbefolkning og ignorerer derfor både kjønn og alder. Vi ønsker data for årene 2000-2020.

iv. Bruk `filter(str_length(geo) == 5)` for å begrense datasettet til NUTS3 regioner. Vi vil gjøre vår egen aggregering.

v.  Hent data for landene:

```{r}
dsd_popgdp <- get_eurostat_dsd("nama_10r_3popgdp")
```

```{r}
nama_10r_3popgdp <- get_eurostat_data(
  id = "nama_10r_3popgdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "THS"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(annualpop = 1000 * values) |>
  select(-"values") |>
  filter(str_length(geo) == 5)
```

### Oppgave 3

Hent ned befolkningsdata fra tabellen som har teksten «Population on 1 January by broad age group, sex and NUTS 3 region». Gi også her dataene samme navn som tabell-koden hos Eurostat. Igjen vil vi ikke skille på kjønn eller alder.

```{r}
dsd_pjanaggr3 <- get_eurostat_dsd("demo_r_pjanaggr3")
```

```{r}
demo_r_pjanaggr3 <- get_eurostat_data(
  id = "demo_r_pjanaggr3",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "NR",
    sex = "T",
    age = "TOTAL"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  filter(str_length(geo) == 5)
```

### Oppgave 4

Bruk `setdiff()` for å finne NUTS3 soner som inngår i «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions», men ikke i «Population on 1 January by broad age group, sex and NUTS 3 region».

```{r}
setdiff(nama_10r_3popgdp$geo, demo_r_pjanaggr3$geo)
```

### Oppgave 5

Bruk `setdiff()` for å finne NUTS3 soner som inngår i «Population on 1 January by broad age group, sex and NUTS 3 region», men ikke i «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

```{r}
setdiff(demo_r_pjanaggr3$geo, nama_10r_3popgdp$geo)
```

### Oppgave 6

Gjør en `full_join()` av de to populasjonstabellene. Gi resultatet navnet `full_pop_nuts3`.

```{r}
full_pop_nuts3 <- demo_r_pjanaggr3 |>
  full_join(nama_10r_3popgdp,
            by = join_by(geo, time)) |>
              select(-c(unit.x, unit.y, sex, age)) |>
  rename("pop.x" = values, "pop.y" = annualpop)
            
```

### Oppgave 7

Bruk setdiff() for å sjekke sonene i full_pop_nuts3 mot dem vi har i GDP tabellen.

```{r}
setdiff(full_pop_nuts3$geo, nama_10r_3gdp$geo)
```

### Oppgave 8

Bruk setdiff() for å sjekke sonene i GDP tabellen mot dem vi har i full_pop_nuts3.

```{r}
setdiff(nama_10r_3gdp$geo, full_pop_nuts3$geo)
```

### Oppgave 9

Fjern \*\*ZZZ sonene fra `nama_10r_3gdp`.

```{r}
nama_10r_3gdp <- nama_10r_3gdp |>
  subset(!grepl('_ZZZ$', geo))
```

```{r}
full_pop_nuts3 |> 
  filter(geo %in% c("NO053", "NO060", "NO061")) |> 
  filter(time %in% 2014:2020) |> 
  arrange(time, geo)
```

### Oppgave 10

Lag en ny variabel pop i full_pop_nuts3 ut fra diskusjonen ovenfor. Dropp deretter variablene pop.x og pop.y.

```{r}
full_pop_nuts3 <- full_pop_nuts3 |> 
  mutate(
    pop = ifelse(
      test = is.na(pop.x) == TRUE, 
      yes = pop.y, 
      no = pop.x
      )
  ) |> 
  select(-pop.x, -pop.y)
```

### Oppgave 11

Undersøk om vi har noen NUTS 3 soner med pop lik 0. Hvis det er noen så rekod disse til NA

```{r}
colSums(full_pop_nuts3 == 0)
```

Her fant vi at det er 117 hvor antallet er 0

```{r}
full_pop_nuts3 <- full_pop_nuts3 |>
  mutate_at(c('pop'), ~na_if(., 0))
```

Her har vi endret alle 0 verdiene i kollonne pop til NA verdi, så kontrollerer vi at vi ikke har flere 0 verdier

```{r}
colSums(full_pop_nuts3 == 0)
```

### Oppgave 12

Utfør en left_join() der populasjonsdata blir lagt til datasettet som innholder GDP-data. Gi resultatet navnet `eu_data`.

```{r}
eu_data <- nama_10r_3gdp |>
  left_join(full_pop_nuts3,
            by = join_by(geo, time))
```

```{r}
dim(eu_data)
```

***Her ser vi at vi ikke har likt som i oppgavesettet, men vi finner ikke hvor feilen ligger. Avviket er 123. Vi ser også i oppgave 12 at disse tallene kommer opp som NA verdier.***

```{r}
# lager en ny variabel
eu_data <- eu_data |> 
  mutate(
    country = str_sub(geo, start = 1L, end = 2L)
  )
```

```{r}
#sjekker ut antall NUTS 3
eu_data |> 
  distinct(geo, .keep_all = TRUE) |> 
  group_by(country) |> 
  summarise(Antall = n(), .groups = "drop")
```

```{r}
#sjekker ut summary for variablene 
eu_data |> 
  summary()
```

```{r}
#endrer navn og rekkefølge på variablene
eu_data <- eu_data |> 
  select(country, NUTS3 = geo, year = time, gdp, pop)
```

```{r}
# Rydder opp
# Sletter alle objekt utenom eu_data
# don't use if you don't mean it
rm(list = setdiff(ls(), "eu_data"))
```

### Oppgave 13

Beregn `gdp_per_capita` for hver NUTS3 region for årene 2000-2020. Avrund til 2 desimaler.

```{r}
eu_data <- eu_data |>
  mutate(gdp_per_capita = gdp / pop)
```

Sjekker summary gdp_per_capita.

```{r}
eu_data |>
  select(gdp_per_capita) |> 
  summary()
```

### Oppgave 14

Bruk case_when() for å legge til variabelen `country_name` før vi går videre. Østerrike for AT, Belgia for BE etc..

```{r}
eu_data <- eu_data |>
  mutate(
    "country_name" = case_when(
      country %in% c("AT") ~ "Østerrike",
      country %in% c("DE") ~ "Tyskland",
      country %in% c("DK") ~ "Danmark",
      country %in% c("FR") ~ "Frankrike",
      country %in% c("EL") ~ "Hellas",
      country %in% c("ES") ~ "Spania",
      country %in% c("IT") ~ "Italia",
      country %in% c("NL") ~ "Nederland",
      country %in% c("BE") ~ "Belgia",
      country %in% c("IE") ~ "Irland",
      country %in% c("PL") ~ "Polen",
      country %in% c("PT") ~ "Portugal",
      country %in% c("NO") ~ "Norge",
      country %in% c("SE") ~ "Sverige",
      country %in% c("FI") ~ "Finland",
      country %in% c("CH") ~ "Sveits")
  )
```

### Oppgave 15

Lag de tre variablene NUTS2, NUTS1 og NUTSc fra NUTS3. Dette gjøres enklest vha. mutate() og str_sub(). Bruker også select() for å få variablene i rekkefølgen: country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita . NUTSc er vår egen «oppfinnelse» og angir land (to første karakterer i NUTS kode).

```{r}
x <- eu_data |>
  mutate(
    
  )
```
